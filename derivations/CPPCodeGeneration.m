(* ::Package:: *)

<<CommonSubexpressionElimination`;

generateCPPConstantFromRule[Rule[x_,y_]] :=
 "const auto " <> ToString[y] <> " = " <> ToString[CForm[x]] <> ";"

generateCPPExpressionWithCSE[varName_String, expr_, indent_:"    "] :=
 Module[{optimizedExpr, cseRules, constants, newline = "\n" <> indent},
  {optimizedExpr, cseRules} = hoistCommonSubexpressions[FullSimplify[expr], varName <> "cse"];
  constants = StringJoin @@ Riffle[generateCPPConstantFromRule /@ cseRules, newline];
  "using namespace mathematica;" <> newline <>
  constants <> newline <>
  "const auto " <> varName <> " = " <> ToString[CForm[optimizedExpr]] <> ";"
 ] // formatCPPCode

generateCPPReturnExpressionWithCSE[expr_, indent_:"    "] :=
 generateCPPExpressionWithCSE["v", expr, indent] <> "\n" <> indent <> "return v;"


wrapWords[strs_, indent_, lineLen_, out_: ""] :=
 wrapWords[strs[[2;;]], indent, lineLen, out <> If[StringLength[out] === 0, "", " "] <> strs[[1]]] /;
  StringLength[out] < lineLen && Length[strs] > 0

wrapWords[strs_, indent_, lineLen_, out_: ""] :=
 out <> "\n" <> indent <> wrapWords[strs, indent, lineLen, ""] /;
  StringLength[out] >= lineLen && Length[strs] > 0

wrapWords[strs_, indent_, lineLen_, out_: ""] := out /; Length[strs] === 0


formatCPPCode[str_, indent_: "    ", lineLen_: 100] :=
 StringJoin @@ Riffle[
  wrapWords[StringSplit@#, indent <> indent, lineLen] & /@
   StringSplit[StringReplace[str, {","->", ", "*"->" * ", "/"->" / "}], "\n"],
  "\n" <> indent]


expandTemplateFiles[dir_, mask__, outSuffix_: "_autogenerated"] :=
 Module[{infiles, outfiles, fullOutSuffix = outSuffix <> "."},
  infiles = Select[AbsoluteFileName /@ FileNames[mask, dir], StringCount[#, fullOutSuffix] < 1 &];
  outfiles = (FileNameJoin[{DirectoryName[#], FileBaseName[#]}] <> fullOutSuffix <> FileExtension[#]) & /@ infiles;
  Function[{in, out},
    If[FileExistsQ[out],
     (Print["Removing: ", out]; DeleteFile[out]),
     {}
    ];
    Block[{template = FileTemplate[in]},
     If[Length[template[[1]]] > 1, (* This is how we detect that this file contains templates *)
      (Print["Expanding: ", in];
       CopyFile[FileTemplateApply[template], out];
       out),
      (Print["Skipping: ", in];
       Null)
      ]
     ]
    ] @@@ Transpose[{infiles, outfiles}]
  ] // Select[#, StringQ] &
