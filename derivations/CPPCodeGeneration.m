(* ::Package:: *)

<<CommonSubexpressionElimination`;

generateCPPConstantFromRule[Rule[x_,y_]] :=
 "const auto " <> ToString[y] <> " = " <> ToString[CForm[x]] <> ";"

generateCPPExpressionWithCSE[varName_String, expr_, indent_: "    "] :=
 formatCPPCode[
  Module[{optimizedExpr, cseRules, constants, newline = "\n" <> indent},
   {optimizedExpr, cseRules} = hoistCommonSubexpressions[Simplify[expr], varName <> "cse"];
   constants = StringJoin @@ Riffle[generateCPPConstantFromRule /@ cseRules, newline];
   "using namespace mathematica;" <> newline <>
   constants <> newline <>
   "const auto " <> varName <> " = " <> ToString[CForm[optimizedExpr]] <> ";"
  ], indent]

generateCPPReturnExpressionWithCSE[expr_, indent_: "    "] :=
 generateCPPExpressionWithCSE["tmp", expr, indent] <> "\n" <> indent <> "return tmp;"


wrapWords[strs_, indent_, lineLen_, out_: ""] :=
 wrapWords[strs[[2;;]], indent, lineLen, out <> If[StringLength[out] === 0, "", " "] <> strs[[1]]] /;
  StringLength[out] < lineLen && Length[strs] > 0

wrapWords[strs_, indent_, lineLen_, out_: ""] :=
 out <> "\n" <> indent <> wrapWords[strs, indent, lineLen, ""] /;
  StringLength[out] >= lineLen && Length[strs] > 0

wrapWords[strs_, indent_, lineLen_, out_: ""] := out /; Length[strs] === 0


formatCPPCode[str_, indent_: "    ", lineLen_: 90] :=
 StringJoin @@ Riffle[
  wrapWords[StringSplit@#, indent <> "    ", lineLen] & /@
   StringSplit[StringReplace[str, {","->", ", "*"->" * ", "/"->" / "}], "\n"],
  "\n" <> indent]


expandTemplateFiles[dir_, mask__, outSuffix_: "_autogenerated"] :=
 Module[{infiles, outfiles, fullOutSuffix = outSuffix <> "."},
  infiles = Select[AbsoluteFileName /@ FileNames[mask, dir], StringCount[#, fullOutSuffix] < 1 &];
  outfiles = (FileNameJoin[{DirectoryName[#], FileBaseName[#]}] <> fullOutSuffix <> FileExtension[#]) & /@ infiles;
  Function[{in, out},
    If[FileExistsQ[out],
     (Print["Removing: ", out]; DeleteFile[out]),
     {}
    ];
    Block[{template = FileTemplate[in]},
     If[Length[template[[1]]] > 1, (* This is how we detect that this file contains templates *)
      (Print["Expanding: ", in];
       CopyFile[FileTemplateApply[template], out];
       out),
      (Print["Skipping: ", in];
       Null)
      ]
     ]
    ] @@@ Transpose[{infiles, outfiles}]
  ] // Select[#, StringQ] &



symbolCPPTypeName[symbol_] :=
 "Matrix" <> StringReplace[ToString[Dimensions[symbol]], {"{"->"<", "}"->">"}] /;
  ListQ[symbol] && Length[Dimensions[symbol]] === 2 && Dimensions[symbol][[2]] > 1

symbolCPPTypeName[symbol_] :=
 "Vector<" <> ToString[Dimensions[symbol][[1]]] <> ">" /;
  ListQ[symbol] && (Length[Dimensions[symbol]] === 1 || Dimensions[symbol][[2]] === 1)

symbolCPPTypeName[symbol_] := "Quaternion" /; symbol[[0]] === Quaternion

generateCPPGetterForSymbol[symbolName_String, indent_: "    "] :=
 Module[{indent2 = indent <> indent, symbol = Symbol[symbolName]},
  symbolCPPTypeName[symbol] <> " " <> symbolName <> "() const\n" <> indent <> "{\n" <> indent2 <>
   generateCPPReturnExpressionWithCSE[symbol, indent2] <> "\n" <> indent <> "}"]

generateCPPSetterForSymbol[symbolName_String, indent_: "    "] :=
 Module[{indent2 = indent <> indent, symbol = Symbol[symbolName]},
   "void " <> symbolName <> "(const " <> symbolCPPTypeName[symbol] <> "& new_value_)\n" <>
   indent <> "{\n" <> indent2 <>
    StringJoin@
     Riffle[(ToString[#1] <> " = new_value_[" <> ToString[#2] <> "];" &) @@@
       Transpose@{symbol\[Transpose][[1]], Range[0, Length[symbol] - 1]}, "\n" <> indent2] <>
    "\n" <> indent <> "}"] /;
  ListQ[Symbol[symbolName]] &&
   Length[Dimensions[Symbol[symbolName]]] === 2 &&
   Dimensions[Symbol[symbolName]][[2]] === 1

generateCPPSetterForSymbol[symbolName_String, indent_: "    "] :=
 Module[{indent2 = indent <> indent, symbol = Symbol[symbolName]},
   "void " <> symbolName <> "(const " <> symbolCPPTypeName[symbol] <> "& new_value_)\n" <>
   indent <> "{\n" <> indent2 <>
    StringJoin@
     Riffle[(ToString[#1] <> " = new_value_." <> ToString[#2] <> "();" &) @@@
       Transpose@{List @@ symbol, {"w", "x", "y", "z"}}, "\n" <> indent2] <>
    "\n" <> indent <> "}"] /;
  Symbol[symbolName][[0]] === Quaternion
